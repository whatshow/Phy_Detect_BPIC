import numpy as np
import sys
sys.path.append("..");
from BPIC import BPIC

# symbols & channel
SNR_dB = 10;
No = 10**(-SNR_dB/10);
sympool = [-0.948683298050514 + 0.948683298050514j,-0.948683298050514 + 0.316227766016838j,-0.948683298050514 - 0.948683298050514j,-0.948683298050514 - 0.316227766016838j,-0.316227766016838 + 0.948683298050514j,-0.316227766016838 + 0.316227766016838j,-0.316227766016838 - 0.948683298050514j,-0.316227766016838 - 0.316227766016838j,0.948683298050514 + 0.948683298050514j,0.948683298050514 + 0.316227766016838j,0.948683298050514 - 0.948683298050514j,0.948683298050514 - 0.316227766016838j,0.316227766016838 + 0.948683298050514j,0.316227766016838 + 0.316227766016838j,0.316227766016838 - 0.948683298050514j,0.316227766016838 - 0.316227766016838j];     
M = 16;                                                     # M-ary QAM   
tx_num = 8;                                                 # Tx antenna number
rx_num = 8;

# detection settings
iter_times = 10;
iter_diff_min = 1e-14;

# simulation
# sim - Tx
# Create symbols
x = np.asarray([-0.316227766016838 - 0.948683298050514j,0.948683298050514 + 0.948683298050514j,-0.948683298050514 - 0.948683298050514j,-0.948683298050514 - 0.948683298050514j,0.316227766016838 - 0.948683298050514j,0.316227766016838 + 0.948683298050514j,-0.316227766016838 + 0.316227766016838j,0.316227766016838 + 0.948683298050514j]);

# sim - channel
# Rayleigh fadding channel
H = np.asarray([[-0.0937184605078695 - 0.325789208467691j,-0.409948660388057 + 0.127624248761650j,-0.340198805436454 - 0.183906567544389j,-0.178758506316793 + 0.282813964629862j,0.244065499436287 + 0.119275074002712j,0.404652046497070 + 0.130115778719934j,-0.291995417387099 - 0.229923768101160j,-0.334894332699780 + 0.0552525464226465j], [0.219622958056395 + 0.0725650981717629j,-0.363320175835611 + 0.410690295022615j,0.00692933600943072 - 0.213998656152920j,-0.253960669290041 - 0.440478759146248j,-0.472729539619085 - 0.155380972373546j,-0.159472633495758 - 0.260200215366137j,0.579662075432111 - 0.176605488514093j,-0.321362725313180 - 0.0985553074645269j], [-0.249502891226177 + 0.109915862833289j,-0.200843803086221 - 0.153781516981002j,-0.0869521190125238 + 0.453277723476347j,-0.0440070015458638 - 0.287959010065623j,-0.181405807253415 - 0.468786004067099j,-0.112888548447680 + 0.147966207646305j,-0.249464284100109 - 0.160513111663995j,-0.419130754674168 + 0.209460263241973j], [0.0176151648445601 + 0.125848308893588j,0.210644374774806 - 0.157167834867619j,0.306031314204907 + 0.215087434405301j,0.00532363792563540 - 0.0920732534589593j,-0.0677664395372975 + 0.0769465492113715j,0.0444323433005837 - 0.0729021840594816j,-0.176246859761254 - 0.379934430344965j,0.188967004063272 + 0.0948510566517124j], [-0.0726354203072265 - 0.152514963826217j,0.0124605347653776 - 0.0441394770780427j,-0.183412339395723 + 0.141956075550182j,-0.365225880781488 + 0.371034509203690j,-0.562893120541784 + 0.00976137490744553j,0.203617392271879 - 0.0590450542613002j,0.226791021880027 - 0.436348465887214j,-0.223942217083107 + 0.369899560834625j], [-0.194585576650982 - 0.0884840892415303j,0.311989962765037 + 0.290313533258155j,0.394887920260293 + 0.00166045371238855j,0.0276114079947778 + 0.0977741442568030j,-0.648536770066346 - 0.190426271634298j,0.219959438133846 - 0.219194754563237j,0.0438843795195583 - 0.782226653833541j,-0.433660198611319 + 0.0595437346837353j], [0.0221390631775426 - 0.108024922224070j,0.246773896846918 - 0.0996170232135530j,0.0635643772442668 - 0.149946713553520j,-0.192163956072254 + 0.326913229112732j,-0.423381488059090 - 0.137478693637404j,0.626489889494401 - 0.209204085478038j,0.0170610807015928 + 0.136421979177171j,0.119137549971632 + 0.134745709911560j], [-0.368418607630750 + 0.0411196888132931j,-0.120279128094159 + 0.232088798800701j,0.116098052448713 + 0.293807787523707j,0.105337773334338 - 0.144294641487873j,0.223850108811265 - 0.194860166350551j,0.118196998274075 - 0.168236450019131j,0.00147906268446563 - 0.243681938057881j,-0.0634923967675354 - 0.0946825964887651j]]);
# Noise
noise = np.asarray([-0.204527964982421 - 0.0500389056202131j,-0.385548490587204 - 0.0612078926273433j,-0.306621809863722 + 0.140884055425924j,0.393714151395090 - 0.0708234588599821j,-0.290296669529387 + 0.0540351317620554j,0.114491656811451 + 0.316821580231710j,0.0152629620793205 + 0.138432740431822j,0.154159965160627 - 0.132990175724025j]);
# through Rayleigh fadding channel to get y 
y = H@x + noise;

# sim - Rx
# BPIC - ZF - uniform
bpic = BPIC(sympool, bso_mean_init=BPIC.BSO_MEAN_INIT_ZF, bso_mean_cal=BPIC.BSO_MEAN_CAL_ZF, bso_var_cal=BPIC.BSO_VAR_CAL_ZF, dsc_ise=BPIC.DSC_ISE_ZF, iter_diff_min=iter_diff_min);
syms_BPIC_ZF_Uniform = bpic.detect(y, H, No);